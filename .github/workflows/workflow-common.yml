name: Common workflow steps
on:
  schedule:
    - cron: '0 3 * * *'
  workflow_call:
    inputs:
      config-path:
        required: false
        type: string

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Apt install dependencies
          run: |
            sudo apt-get update --fix-missing
            sudo apt-get install doxygen
            sudo apt-get clean
            sudo apt-get autoremove --yes
            sudo rm -rf /var/lib/{cache,log}
            sudo rm -rf /var/lib/apt/lists/*
        - name: Pip install dependencies
          run: |
            pip install --upgrade pip
            pip install -r ci/requirements.txt
        - name: Check copyright
          continue-on-error: true
          run: ./common_dev/scripts/copyrights.py -C scargo/
        - name: Check TODO
          continue-on-error: true
          run: ./common_dev/scripts/todo_check.py -C scargo -C tests
        - name: Check with Black
          run: black --check --diff scargo tests common_dev run.py clean.py
        - name: Check isort
          run: isort --profile=black --check --diff scargo tests common_dev run.py clean.py
        - name: Check Cyclomatic
          continue-on-error: true
          run: ./common_dev/scripts/cyclomatic.py
        - name: Run pylint
          run: ./common_dev/scripts/pylintchecker.py -c scargo/ -s 9.95 --exclude=tests/
        - name: Check typing with mypy
          run: mypy --explicit-package-bases scargo tests common_dev run.py clean.py
  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Apt install dependencies
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get install doxygen
          sudo apt-get clean
          sudo apt-get autoremove --yes
          sudo rm -rf /var/lib/{cache,log}
          sudo rm -rf /var/lib/apt/lists/*

      - name: Pip install dependencies
        run: |
          pip install --upgrade pip
          pip install -r ci/requirements.txt

      - name: Unit tests
        run: |
          # Clean docker before test (github like to go out of memory)
          # Also there is need for repeatable results with docker (cache is faster but it can give some false positives and false negatives while testing)
          docker system prune -af --volumes
          ./run.py -u

      - name: Archive unit-tests results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-report
          path: build/test_doc
  integration_tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - esp32
          - x86
          - stm32
          # optional target, should be added for new tests in case of introducing markers
          # - not esp32 and not x86 and not stm32
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Apt install dependencies
        run: |
          sudo apt-get update --fix-missing
          sudo apt-get install doxygen
          sudo apt-get clean
          sudo apt-get autoremove --yes
          sudo rm -rf /var/lib/{cache,log}
          sudo rm -rf /var/lib/apt/lists/*

      - name: Pip install dependencies
        run: |
          pip install --upgrade pip
          pip install -r ci/requirements.txt

        # Clean docker before test (GitHub like to go out of memory)
        # Also there is need for repeatable results with docker
        # (cache is faster, but it can give some false positives and false negatives while testing)
      - name: Clean docker images
        run: |
          docker system prune -af --volumes

      - name: Build wheel to use inside docker
        run: |
          rm -rf dist
          flit build
          echo "SCARGO_DOCKER_INSTALL_LOCAL=$(find dist -name "*.whl")" >> $GITHUB_ENV

      - name: Integration tests
        run: |
          ./run.py -c "${{ matrix.target }}"

      - name: Archive integration-tests results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-${{ matrix.target }}-test-report
          path: build/test_doc

  documentation:
    runs-on: ubuntu-latest
    container:
      image: spyrosoftsa/scargo-dev:1.4
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate HTML documentation
        run: ./run.py --doc
