#
# DO NOT EDIT THIS FILE!
# This file is generated by `scargo update`.
#

from conan import ConanFile
from conans import tools
from conan.tools.cmake import CMakeToolchain, CMake, cmake_layout

{% if config.project.target.family == "stm32" %}
from conans import tools
import os
{% endif %}

class {{ config.project.name|capitalize|replace("-", "") }}Conan(ConanFile):  # type: ignore[misc, no-any-unimported]
    name = "{{ config.project.name }}"
    version = "{{ config.project.version }}"
    license = "MIT"
    description = "{{ config.project.description }}"
    settings = "os", "compiler", "build_type", "arch"
    url = "{{ config.project.homepage_url }}"
    generators = "CMakeDeps"
    exports_sources = ["{{ config.source_dir_path.relative_to(config.project_root) }}/*", "CMakeLists.txt", "include/*", "config/*"]
    {% if config.dependencies.build or config.dependencies.tool %}
    def build_requirements(self) -> None:
        {% for dep in config.dependencies.build %}
        self.requires("{{ dep }}")
        {% endfor %}
        {% for tool_dep in config.dependencies.tool %}
        self.tool_requires("{{ tool_dep }}")
        {% endfor %}
    {% endif %}

    {% if config.dependencies.general %}
    def requirements(self) -> None:
        {% for dep in config.dependencies.general %}
        self.requires("{{ dep }}")
        {% endfor %}
    {% endif %}

    def source(self) -> None:
    {% if config.project.target.family == "stm32" %}
        git = tools.Git(folder="third-party/stm32-cmake")
        if not os.listdir(git.folder):
            git.clone("https://github.com/ObKo/stm32-cmake.git", "master")
    {% elif config.project.target.family == "atsam" %}
        import requests
        import re
        from pathlib import Path

        chip_series = "{{ config.atsam.chip_series }}"
        dfp_outdir = Path(f"{chip_series}_DFP")
        cmsis_outdir = Path("CMSIS")
        if dfp_outdir.is_dir() and cmsis_outdir.is_dir():
            return

        packs_url = "http://packs.download.atmel.com"

        if not dfp_outdir.is_dir():
            packs_web_content = requests.get(packs_url).text
            match_atpack = re.search(
                f'data-link="(Atmel\.{chip_series}\\S*\\.atpack)"',
                packs_web_content,
                re.MULTILINE | re.DOTALL,
            )
            dfp_filename = match_atpack.group(1)
            tools.get(f"{packs_url}/{dfp_filename}", destination=dfp_outdir)

        if not cmsis_outdir.is_dir():
            cmsis_filename = "ARM.CMSIS.5.4.0.atpack"
            tools.get(f"{packs_url}/{cmsis_filename}", destination=cmsis_outdir)
    {% else %}
        pass
    {% endif %}

    def layout(self) -> None:
        cmake_layout(self)

    def generate(self) -> None:
        tc = CMakeToolchain(self)
        tc.generate()

    def build(self) -> None:
        cmake = CMake(self)
        cmake.configure()
        cmake.build()

    def package(self) -> None:
    {% if config.project.lib_name %}
        cmake = CMake(self)
        cmake.install()
    {% else %}
        self.copy("*.bin")
        self.copy("*.elf")
    {% endif %}

    {% if config.project.lib_name %}
    def package_info(self) -> None:
        self.cpp_info.libs = ["{{ config.project.name }}"]
    {% endif %}
